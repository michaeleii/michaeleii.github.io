---
import Label from "./Label.astro";
import type Technologies from "../technologies";

interface Props {
  title: string;
  technologies?: Technologies[];
  body: string;
  link: string;
  linkText: string;
  createdAt?: Date;
}

const { title, body, link, linkText, createdAt, technologies } =
  Astro.props as Props;
---

<article
  class="flex flex-col rounded-xl border bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800 dark:shadow-slate-700/[.7]"
>
  <div class="flex flex-1 flex-col p-4 md:p-5">
    <h3 class="text-lg font-bold text-gray-800 dark:text-white">{title}</h3>
    <p class="mt-2 flex-1 text-gray-800 dark:text-gray-400">
      {body}
    </p>
    <a
      class="mt-3 inline-flex w-fit items-center gap-2 text-sm font-medium text-blue-500 hover:text-blue-700"
      href={link}
      target="_blank"
    >
      {linkText}
      <svg
        class="h-auto w-2.5"
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M5 1L10.6869 7.16086C10.8637 7.35239 10.8637 7.64761 10.6869 7.83914L5 14"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
        >
        </path>
      </svg>
    </a>
  </div>
  <div
    class="rounded-b-xl border-t bg-gray-100 px-4 py-3 dark:border-gray-700 dark:bg-gray-800 md:px-5 md:py-4"
  >
    <p class="mt-1 text-sm text-gray-500 dark:text-gray-500">
      {!!technologies && technologies.map((t) => <Label technology={t} />)}
      {
        !!createdAt && (
          <span class="ml-2">
            {new Intl.DateTimeFormat("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
            }).format(createdAt)}
          </span>
        )
      }
    </p>
  </div>
</article>
